package edu.javacourse.collection.lesson_map.hash_map;

import java.util.HashMap;
import java.util.Map;

/*
    0[] 1[17] 2[] 3[19, 35] 4[4] 5[] 6[] 7[] 8[] 9[] 10[] 11[] 12[] 13[] 14[] 15[] - 16 корзин

    17 % 16 = 1
    19 % 16 = 3
    4 % 16 = 4
    35 % 16 = 3 - коллизия
 */


/*
    Для того чтобы определить индекс данного массива используется hashCode ключа
    1. Берется hashCode нашего ключа
    2. Считается остаток от деления на количество наших корзин

    В ячейку добавляется не просто пара, а пара в виде Node
    Добавляем пару - создается объект Node

    Коллизия:
    случай когда в одну ячейку массива попадает более одной пары
    35 % 16 = 3 - коллизия
    Данная пара должна пойти в ячеку 3, но там уже есть пара
    В таком случае в Map создается массив, внутри которого хранятся
    связные списки (LinkedList)
    Перед тем как новая пара добавится в данную ячейку происходит проверка ключей
    методом equals, применяется к ключу старой пары и к ключу новой пары
    Будет false - новая пара после старой пары и создался LinkedList
    Пара с ключом 19 будет смотреть на пару с ключом 35 через ссылку

    Если будет true: (одинаковый ключ)
    Сначала добавилась пара с ключом 19 с text2
    19.equals(19) == true
    и новая пара заменяет старую пару
 */


public class Example1
{
    public static void main(String[] args) {
        Map<Integer, String> map = new HashMap<>();
        map.put(17, "text1");
        map.put(19, "text2");
        map.put(4, "text3");
        map.put(35, "text3"); // коллизия

        for (Map.Entry<Integer, String> entry : map.entrySet()) {
            System.out.println(entry);
        }
    }
}
